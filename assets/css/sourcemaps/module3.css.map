{"version":3,"file":"../module3.css","sources":["module3.scss","base/variables.scss","vendors/include-media.scss","base/mixins.scss","base/helpers.scss","../../../../module/diagonalLayouts/diagonalLayouts.scss","../../../../module/snowCanvas/snowCanvas.scss"],"sourcesContent":["// project setting\r\n@import 'base/variables';\r\n@import \"vendors/include-media\";\r\n@import \"base/mixins\";\r\n@import 'base/helpers';\n// diagonalLayouts\n@import \"../../../../module/diagonalLayouts/diagonalLayouts.scss\";\n\n// snowCanvas\n@import \"../../../../module/snowCanvas/snowCanvas.scss\";\n","$breakpoints: (\r\n\t'full': 1920px,\r\n\t'xl': 1680px,\r\n\t'macbook': 1440px,\r\n\t'ipad-pro': 1366px,\r\n\t'desktop': 1024px,\r\n\t'tablet': 768px,\r\n\t'phone': 667px,\r\n\t'xs-phone': 375px,\r\n);\r\n// ligatured operators ≥ ≤\r\n\r\n// keywords\r\n$media-expressions: (\r\n\t'screen': 'screen',\r\n\t'print': 'print',\r\n\t'handheld': 'handheld',\r\n\t'landscape': '(orientation: landscape)',\r\n\t'portrait': '(orientation: portrait)',\r\n\t'retina2x': '(-webkit-min-device-pixel-ratio: 1.5), (min-resolution: 144dpi)',\r\n\t'retina3x': '(-webkit-min-device-pixel-ratio: 2.5), (min-resolution: 240dpi)'\r\n);\r\n\r\n// Colors basic\r\n// Color calculator - http://razorjam.github.io/sasscolourfunctioncalculator/\r\n// Color names - http://name-of-color.com/\r\n\r\n$gray: #999;\r\n$black: #333;\r\n$white: #fff;\r\n\r\n// Colors theme\r\n$color-brand:          #6b9d52;\r\n$color-brand-dark:     darken($color-brand,15%);\r\n$color-brand-light:    lighten($color-brand,15%);\r\n\r\n// Fonts\r\n$base-main-font: \"example-font-family\";\r\n$base-font-sans-serif: $base-main-font, 'Arial', 'Helvetica Neue', 'Helvetica', sans-serif;\r\n$base-font-serif: 'Times New Roman', 'Times', 'Baskerville', 'Georgia', serif;\r\n\r\n// This is the default html and body font-size for the base rem value.\r\n$rem-base: 16px;\r\n\r\n// Body\r\n$base-text-color: #000;\r\n$font-size-base: 16px;\r\n$line-height-base: 1.2;\r\n$base-font-family: $base-font-sans-serif;\r\n$vertical-rhythm: ($line-height-base * 1em);\r\n\r\n// Headers\r\n$h1-font-size: 30px;\r\n$h2-font-size: 27px;\r\n$h3-font-size: 24px;\r\n$h4-font-size: 21px;\r\n$h5-font-size: 17px;\r\n$h6-font-size: 15px;\r\n\r\n// Container\r\n$container-width: 1265px;\r\n$container-pading-left: 50px;\r\n$container-pading-right: $container-pading-left;\r\n$container-width-full: $container-width + $container-pading-left + $container-pading-right;\r\n\r\n// Buttons\r\n$btn-padding-y: 10px;\r\n$btn-padding-x: 20px;\r\n$btn-font-size: 18px;\r\n$btn-radius: 3px;\r\n$btn-border-width: 1px;\r\n$btn-line-height: 1.1;\r\n\r\n// Animation\r\n$animation-speed: 0.3s;\r\n$animation-name: ease;","//     _            _           _                           _ _\r\n//    (_)          | |         | |                         | (_)\r\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\r\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\r\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\r\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\r\n//\r\n//      Simple, elegant and maintainable media queries in Sass\r\n//                        v1.4.1\r\n//\r\n//                http://include-media.com\r\n//\r\n//         Authors: Eduardo Boucas (@eduardoboucas)\r\n//                  Hugo Giraudel (@hugogiraudel)\r\n//\r\n//      This project is licensed under the terms of the MIT license\r\n\r\n\r\n////\r\n/// include-media library public configuration\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n\r\n///\r\n/// Creates a list of global breakpoints\r\n///\r\n/// @example scss - Creates a single breakpoint with the label `phone`\r\n///  $breakpoints: ('phone': 320px);\r\n///\r\n$breakpoints: (\r\n\t'phone': 320px,\r\n\t'tablet': 768px,\r\n\t'desktop': 1024px\r\n) !default;\r\n\r\n\r\n///\r\n/// Creates a list of static expressions or media types\r\n///\r\n/// @example scss - Creates a single media type (screen)\r\n///  $media-expressions: ('screen': 'screen');\r\n///\r\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\r\n///  $media-expressions: (\r\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\r\n///  );\r\n///\r\n$media-expressions: (\r\n\t'screen': 'screen',\r\n\t'print': 'print',\r\n\t'handheld': 'handheld',\r\n\t'landscape': '(orientation: landscape)',\r\n\t'portrait': '(orientation: portrait)',\r\n\t'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)',\r\n\t'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi)'\r\n) !default;\r\n\r\n\r\n///\r\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\r\n///\r\n/// @example scss - Interval for pixels is defined as `1` by default\r\n///  @include media('>128px') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 129px) {}\r\n///\r\n/// @example scss - Interval for ems is defined as `0.01` by default\r\n///  @include media('>20em') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 20.01em) {}\r\n///\r\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\r\n///  @include media('>2.0rem') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 2.1rem) {}\r\n///\r\n$unit-intervals: (\r\n\t'px': 1,\r\n\t'em': 0.01,\r\n\t'rem': 0.1\r\n) !default;\r\n\r\n///\r\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\r\n/// for browsers that don't support media queries.\r\n///\r\n/// @example scss - Disables support for media queries\r\n///  $im-media-support: false;\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n$im-media-support: true !default;\r\n\r\n///\r\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\r\n/// intercept the breakpoint will be displayed, any others will be ignored.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'tablet';\r\n///  @include media('>=desktop') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-breakpoint: 'desktop' !default;\r\n\r\n///\r\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\r\n/// are not supported.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'screen') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///   /* Generates: */\r\n///   .foo {\r\n///     color: tomato;\r\n///   }\r\n///\r\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'retina2x') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\r\n\r\n////\r\n/// Cross-engine logging engine\r\n/// @author Hugo Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Log a message either with `@error` if supported\r\n/// else with `@warn`, using `feature-exists('at-error')`\r\n/// to detect support.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@function log($message) {\r\n\t@if feature-exists('at-error') {\r\n\t\t@error $message;\r\n\t} @else {\r\n\t\t@warn $message;\r\n\t\t$_: noop();\r\n\t}\r\n\r\n\t@return $message;\r\n}\r\n\r\n\r\n///\r\n/// Wrapper mixin for the log function so it can be used with a more friendly\r\n/// API than `@if log('..') {}` or `$_: log('..')`. Basically, use the function\r\n/// within functions because it is not possible to include a mixin in a function\r\n/// and use the mixin everywhere else because it's much more elegant.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@mixin log($message) {\r\n\t@if log($message) {}\r\n}\r\n\r\n\r\n///\r\n/// Function with no `@return` called next to `@warn` in Sass 3.3\r\n/// to trigger a compiling error and stop the process.\r\n///\r\n@function noop() {}\r\n\r\n///\r\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\r\n///\r\n@function im-intercepts-static-breakpoint($conditions...) {\r\n\t$no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\r\n\r\n\t@if not $no-media-breakpoint-value {\r\n\t\t@if log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\r\n\t}\r\n\r\n\t@each $condition in $conditions {\r\n\t\t@if not map-has-key($media-expressions, $condition) {\r\n\t\t\t$operator: get-expression-operator($condition);\r\n\t\t\t$prefix: get-expression-prefix($operator);\r\n\t\t\t$value: get-expression-value($condition, $operator);\r\n\r\n\t\t\t@if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\r\n\t\t\t\t\t($prefix == 'min' and $value > $no-media-breakpoint-value) {\r\n\t\t\t\t@return false;\r\n\t\t\t}\r\n\t\t} @else if not index($im-no-media-expressions, $condition) {\r\n\t\t\t@return false;\r\n\t\t}\r\n\t}\r\n\r\n\t@return true;\r\n}\r\n\r\n////\r\n/// Parsing engine\r\n/// @author Hugo Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Get operator of an expression\r\n///\r\n/// @param {String} $expression - Expression to extract operator from\r\n///\r\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\r\n///\r\n@function get-expression-operator($expression) {\r\n\t@each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\r\n\t\t@if str-index($expression, $operator) {\r\n\t\t\t@return $operator;\r\n\t\t}\r\n\t}\r\n\r\n\t// It is not possible to include a mixin inside a function, so we have to\r\n\t// rely on the `log(..)` function rather than the `log(..)` mixin. Because\r\n\t// functions cannot be called anywhere in Sass, we need to hack the call in\r\n\t// a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n\t// Sass 3.3, change this line in `@if log(..) {}` instead.\r\n\t$_: log('No operator found in `#{$expression}`.');\r\n}\r\n\r\n\r\n///\r\n/// Get dimension of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract dimension from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {String} - `width` or `height` (or potentially anything else)\r\n///\r\n@function get-expression-dimension($expression, $operator) {\r\n\t$operator-index: str-index($expression, $operator);\r\n\t$parsed-dimension: str-slice($expression, 0, $operator-index - 1);\r\n\t$dimension: 'width';\r\n\r\n\t@if str-length($parsed-dimension) > 0 {\r\n\t\t$dimension: $parsed-dimension;\r\n\t}\r\n\r\n\t@return $dimension;\r\n}\r\n\r\n\r\n///\r\n/// Get dimension prefix based on an operator\r\n///\r\n/// @param {String} $operator - Operator\r\n///\r\n/// @return {String} - `min` or `max`\r\n///\r\n@function get-expression-prefix($operator) {\r\n\t@return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\r\n}\r\n\r\n\r\n///\r\n/// Get value of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract value from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {Number} - A numeric value\r\n///\r\n@function get-expression-value($expression, $operator) {\r\n\t$operator-index: str-index($expression, $operator);\r\n\t$value: str-slice($expression, $operator-index + str-length($operator));\r\n\r\n\t@if map-has-key($breakpoints, $value) {\r\n\t\t$value: map-get($breakpoints, $value);\r\n\t} @else {\r\n\t\t$value: to-number($value);\r\n\t}\r\n\r\n\t$interval: map-get($unit-intervals, unit($value));\r\n\r\n\t@if not $interval {\r\n\t\t// It is not possible to include a mixin inside a function, so we have to\r\n\t\t// rely on the `log(..)` function rather than the `log(..)` mixin. Because\r\n\t\t// functions cannot be called anywhere in Sass, we need to hack the call in\r\n\t\t// a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n\t\t// Sass 3.3, change this line in `@if log(..) {}` instead.\r\n\t\t$_: log('Unknown unit `#{unit($value)}`.');\r\n\t}\r\n\r\n\t@if $operator == '>' {\r\n\t\t$value: $value + $interval;\r\n\t} @else if $operator == '<' {\r\n\t\t$value: $value - $interval;\r\n\t}\r\n\r\n\t@return $value;\r\n}\r\n\r\n\r\n///\r\n/// Parse an expression to return a valid media-query expression\r\n///\r\n/// @param {String} $expression - Expression to parse\r\n///\r\n/// @return {String} - Valid media query\r\n///\r\n@function parse-expression($expression) {\r\n\t// If it is part of $media-expressions, it has no operator\r\n\t// then there is no need to go any further, just return the value\r\n\t@if map-has-key($media-expressions, $expression) {\r\n\t\t@return map-get($media-expressions, $expression);\r\n\t}\r\n\r\n\t$operator: get-expression-operator($expression);\r\n\t$dimension: get-expression-dimension($expression, $operator);\r\n\t$prefix: get-expression-prefix($operator);\r\n\t$value: get-expression-value($expression, $operator);\r\n\r\n\t@return '(#{$prefix}-#{$dimension}: #{$value})';\r\n}\r\n\r\n///\r\n/// Slice `$list` between `$start` and `$end` indexes\r\n///\r\n/// @access private\r\n///\r\n/// @param {List} $list - List to slice\r\n/// @param {Number} $start [1] - Start index\r\n/// @param {Number} $end [length($list)] - End index\r\n///\r\n/// @return {List} Sliced list\r\n///\r\n@function slice($list, $start: 1, $end: length($list)) {\r\n\t@if length($list) < 1 or $start > $end {\r\n\t\t@return ();\r\n\t}\r\n\r\n\t$result: ();\r\n\r\n\t@for $i from $start through $end {\r\n\t\t$result: append($result, nth($list, $i));\r\n\t}\r\n\r\n\t@return $result;\r\n}\r\n\r\n////\r\n/// String to number converter\r\n/// @author Hugo Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Casts a string into a number\r\n///\r\n/// @param {String | Number} $value - Value to be parsed\r\n///\r\n/// @return {Number}\r\n///\r\n@function to-number($value) {\r\n\t@if type-of($value) == 'number' {\r\n\t\t@return $value;\r\n\t} @else if type-of($value) != 'string' {\r\n\t\t$_: log('Value for `to-number` should be a number or a string.');\r\n\t}\r\n\r\n\t$result: 0;\r\n\t$digits: 0;\r\n\t$minus: str-slice($value, 1, 1) == '-';\r\n\t$numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\r\n\r\n\t@for $i from if($minus, 2, 1) through str-length($value) {\r\n\t\t$character: str-slice($value, $i, $i);\r\n\r\n\t\t@if not (index(map-keys($numbers), $character) or $character == '.') {\r\n\t\t\t@return to-length(if($minus, -$result, $result), str-slice($value, $i))\r\n\t\t}\r\n\r\n\t\t@if $character == '.' {\r\n\t\t\t$digits: 1;\r\n\t\t} @else if $digits == 0 {\r\n\t\t\t$result: $result * 10 + map-get($numbers, $character);\r\n\t\t} @else {\r\n\t\t\t$digits: $digits * 10;\r\n\t\t\t$result: $result + map-get($numbers, $character) / $digits;\r\n\t\t}\r\n\t}\r\n\r\n\t@return if($minus, -$result, $result);;\r\n}\r\n\r\n\r\n///\r\n/// Add `$unit` to `$value`\r\n///\r\n/// @param {Number} $value - Value to add unit to\r\n/// @param {String} $unit - String representation of the unit\r\n///\r\n/// @return {Number} - `$value` expressed in `$unit`\r\n///\r\n@function to-length($value, $unit) {\r\n\t$units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\r\n\r\n\t@if not index(map-keys($units), $unit) {\r\n\t\t$_: log('Invalid unit `#{$unit}`.');\r\n\t}\r\n\r\n\t@return $value * map-get($units, $unit);\r\n}\r\n\r\n///\r\n/// This mixin aims at redefining the configuration just for the scope of\r\n/// the call. It is helpful when having a component needing an extended\r\n/// configuration such as custom breakpoints (referred to as tweakpoints)\r\n/// for instance.\r\n///\r\n/// @author Hugo Giraudel\r\n///\r\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\r\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\r\n///\r\n/// @example scss - Extend the global breakpoints with a tweakpoint\r\n///  @include media-context(('custom': 678px)) {\r\n///    .foo {\r\n///      @include media('>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend the global media expressions with a custom one\r\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend both configuration maps\r\n///  @include media-context(('custom': 678px), ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\r\n\t// Save global configuration\r\n\t$global-breakpoints: $breakpoints;\r\n\t$global-media-expressions: $media-expressions;\r\n\r\n\t// Update global configuration\r\n\t$breakpoints: map-merge($breakpoints, $tweakpoints) !global;\r\n\t$media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\r\n\r\n\t@content;\r\n\r\n\t// Restore global configuration\r\n\t$breakpoints: $global-breakpoints !global;\r\n\t$media-expressions: $tweak-media-expressions !global;\r\n}\r\n\r\n////\r\n/// include-media public exposed API\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n\r\n///\r\n/// Generates a media query based on a list of conditions\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @example scss - With a single set breakpoint\r\n///  @include media('>phone') { }\r\n///\r\n/// @example scss - With two set breakpoints\r\n///  @include media('>phone', '<=tablet') { }\r\n///\r\n/// @example scss - With custom values\r\n///  @include media('>=358px', '<850px') { }\r\n///\r\n/// @example scss - With set breakpoints with custom values\r\n///  @include media('>desktop', '<=1350px') { }\r\n///\r\n/// @example scss - With a static expression\r\n///  @include media('retina2x') { }\r\n///\r\n/// @example scss - Mixing everything\r\n///  @include media('>=350px', '<tablet', 'retina3x') { }\r\n///\r\n@mixin media($conditions...) {\r\n\t@if ($im-media-support and length($conditions) == 0) or\r\n\t\t\t(not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\r\n\t\t@content;\r\n\t} @else if ($im-media-support and length($conditions) > 0) {\r\n\t\t@media #{unquote(parse-expression(nth($conditions, 1)))} {\r\n\t\t\t// Recursive call\r\n\t\t\t@include media(slice($conditions, 2)...) {\r\n\t\t\t\t@content;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}","// vertical align el inside parent with fixed height/min-height\r\n// usage\r\n// html - .parent>.child\r\n// scss - @include v-align;\r\n//     or @include v-align(250px);\r\n//     or @include v-align(250px, bottom, before);\r\n//\r\n@mixin v-align($va-height: 100%, $va-direction: middle, $va-pseudo: after) {\r\n\twhite-space: nowrap;\r\n\ttext-align: center;\r\n\r\n\t&:#{$va-pseudo} {\r\n\t\tcontent: '';\r\n\t\tdisplay: inline-block;\r\n\t\tvertical-align: $va-direction;\r\n\t\twidth: 0;\r\n\t\tmin-height: $va-height;\r\n\t}\r\n\r\n\t> * {\r\n\t\twhite-space: normal;\r\n\t\tdisplay: inline-block;\r\n\t\tvertical-align: $va-direction;\r\n\t\tmax-width: 99%;\r\n\t}\r\n}\r\n\r\n// vertical align a pair of child el inside parent\r\n// usage\r\n// html - .post>.image+.text\r\n// scss - @include v-align-pair(image, text);\r\n//     or @include v-align-pair(image, text, bottom);\r\n//     or @include v-align-pair(image, text, middle, 200px);\r\n//\r\n@mixin v-align-pair($child-name1, $child-name2, $valign: middle, $width1: auto, $width2: auto ) {\r\n\tdisplay: table;\r\n\t.#{$child-name1}{\r\n\t\tdisplay: table-cell;\r\n\t\tvertical-align: $valign;\r\n\t\twidth: $width1;\r\n\t}\r\n .#{$child-name2} {\r\n\t\tdisplay: table-cell;\r\n\t\tvertical-align: $valign;\r\n\t\twidth: $width2;\r\n\t}\r\n}\r\n\r\n\r\n// vertical align el\r\n// usage: @include vertical-align-el;\r\n//\r\n@mixin vertical-align-el {\r\n\tposition: relative;\r\n\ttop: 50%;\r\n\ttransform: translateY(-50%);\r\n}\r\n\r\n/// Mixin helping defining both `width` and `height` simultaneously.\r\n///\r\n/// @author Hugo Giraudel\r\n///\r\n/// @access public\r\n///\r\n/// @param {Length} $width - Element’s `width`\r\n/// @param {Length} $height ($width) - Element’s `height`\r\n///\r\n/// @example scss - Usage\r\n///   .foo {\r\n///     @include size(10em);\r\n///   }\r\n///\r\n///   .bar {\r\n///     @include size(100%, 10em);\r\n///   }\r\n///\r\n/// @example css - CSS output\r\n///   .foo {\r\n///     width: 10em;\r\n///     height: 10em;\r\n///   }\r\n///\r\n///   .bar {\r\n///     width: 100%;\r\n///     height: 10em;\r\n///   }\r\n///\r\n@mixin size($width: 100px, $height: $width) {\r\n\twidth: $width;\r\n\theight: $height;\r\n}\r\n\r\n/// font-smothing\r\n/// @include font-smoothing(on);\r\n/// @include font-smoothing(off);\r\n@mixin font-smoothing($value:on){\r\n\t@if $value == on{\r\n\t\t-webkit-font-smoothing:antialiased;\r\n\t\t-moz-osx-font-smoothing:grayscale;\r\n\t}\r\n\t@else{\r\n\t\t-webkit-font-smoothing:subpixel-antialiased;\r\n\t\t-moz-osx-font-smoothing:auto;\r\n\t}\r\n}\r\n\r\n\r\n/// Hides the text in an element, commonly used to show an image. Some elements will need block-level styles applied.\r\n///\r\n/// @link http://zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement\r\n///\r\n/// @example scss - Usage\r\n///   .element {\r\n///     @include hide-text;\r\n///   }\r\n///\r\n/// @example css - CSS Output\r\n///   .element {\r\n///     overflow: hidden;\r\n///     text-indent: 101%;\r\n///     white-space: nowrap;\r\n///   }\r\n///\r\n@mixin hide-text {\r\n\toverflow: hidden;\r\n\ttext-indent: 101%;\r\n\twhite-space: nowrap;\r\n}\r\n\r\n\r\n/// Creates a visual triangle. https://github.com/thoughtbot/bourbon/blob/v5.1.0/core/bourbon/library/_triangle.scss\r\n/// Generates a triangle pointing in a specified direction.\r\n///\r\n/// @argument {string} $direction\r\n///   The direction the triangle should point. Accepts `up`, `up-right`,\r\n///   `right`, `down-right`, `down`, `down-left`, `left` or `up-left`.\r\n///\r\n/// @argument {number (with unit)} $width\r\n///   Width of the triangle.\r\n///\r\n/// @argument {number (with unit)} $height\r\n///   Height of the triangle.\r\n///\r\n/// @argument {color} $color\r\n///   Color of the triangle.\r\n///\r\n/// @example scss\r\n///   .element {\r\n///     &::before {\r\n///       @include triangle(\"up\", 2rem, 1rem, #b25c9c);\r\n///       content: \"\";\r\n///     }\r\n///   }\r\n///\r\n///   // CSS Output\r\n///   .element::before {\r\n///     border-style: solid;\r\n///     height: 0;\r\n///     width: 0;\r\n///     border-color: transparent transparent #b25c9c;\r\n///     border-width: 0 1rem 1rem;\r\n///     content: \"\";\r\n///   }\r\n\r\n@mixin triangle(\r\n\t$direction,\r\n\t$width,\r\n\t$height,\r\n\t$color\r\n) {\r\n\t@if not index(\r\n\t\t\"up\" \"up-right\" \"right\" \"down-right\" \"down\" \"down-left\" \"left\" \"up-left\",\r\n\t\t$direction\r\n\t) {\r\n\t\t@error \"Direction must be `up`, `up-right`, `right`, `down-right`, \" +\r\n\t\t\t\t\t \"`down`, `down-left`, `left` or `up-left`.\";\r\n\t} @else if not _is-color($color) {\r\n\t\t@error \"`#{$color}` is not a valid color for the `$color` argument in \" +\r\n\t\t\t\t\t \"the `triangle` mixin.\";\r\n\t} @else {\r\n\t\tborder-style: solid;\r\n\t\theight: 0;\r\n\t\twidth: 0;\r\n\r\n\t\t@if $direction == \"up\" {\r\n\t\t\tborder-color: transparent transparent $color;\r\n\t\t\tborder-width: 0 ($width / 2) $height;\r\n\t\t} @else if $direction == \"up-right\" {\r\n\t\t\tborder-color: transparent $color transparent transparent;\r\n\t\t\tborder-width: 0 $width $width 0;\r\n\t\t} @else if $direction == \"right\" {\r\n\t\t\tborder-color: transparent transparent transparent $color;\r\n\t\t\tborder-width: ($height / 2) 0 ($height / 2) $width;\r\n\t\t} @else if $direction == \"down-right\" {\r\n\t\t\tborder-color: transparent transparent $color;\r\n\t\t\tborder-width: 0 0 $width $width;\r\n\t\t} @else if $direction == \"down\" {\r\n\t\t\tborder-color: $color transparent transparent;\r\n\t\t\tborder-width: $height ($width / 2) 0;\r\n\t\t} @else if $direction == \"down-left\" {\r\n\t\t\tborder-color: transparent transparent transparent $color;\r\n\t\t\tborder-width: $width 0 0 $width;\r\n\t\t} @else if $direction == \"left\" {\r\n\t\t\tborder-color: transparent $color transparent transparent;\r\n\t\t\tborder-width: ($height / 2) $width ($height / 2) 0;\r\n\t\t} @else if $direction == \"up-left\" {\r\n\t\t\tborder-color: $color transparent transparent;\r\n\t\t\tborder-width: $width $width 0 0;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/// Animate css properties\r\n// usage\r\n// scss - @include animate(color);\r\n//     or @include animate(color width);\r\n//     or @include animate(color width, 1s, linear);\r\n//\r\n\r\n@mixin animate($properties, $duration: $animation-speed, $easing: ease-in-out) {\r\n\t$list:();\r\n\t@each $prop in $properties {\r\n\t\t$str: #{$prop} #{$duration} #{$easing};\r\n\t\t$list: join($list, #{$str}, comma);\r\n\t}\r\n\ttransition: $list;\r\n}\r\n\r\n//\r\n// @functions\r\n//\r\n\r\n// STRIP UNIT\r\n// It strips the unit of measure and returns it\r\n@function strip-unit($num) {\r\n\t@return $num / ($num * 0 + 1);\r\n}\r\n\r\n// CONVERT TO REM\r\n@function convert-to-rem($value, $base-value: $rem-base) {\r\n\t$value: strip-unit($value) / strip-unit($base-value) * 1rem;\r\n\t@if ($value == 0rem) { $value: 0; } // Turn 0rem into 0\r\n\t@return $value;\r\n}\r\n\r\n// REM CALC\r\n\r\n// New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.\r\n// Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:\r\n//\r\n//   rem-calc(10 20 30px 40);\r\n//\r\n// Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets\r\n//\r\n//   rem-calc((10, 20, 30, 40px));\r\n//\r\n// Optionally call with a different base (eg: 8px) to calculate rem.\r\n//\r\n//   rem-calc(16px 32px 48px, 8px);\r\n//\r\n// If you require to comma separate your list\r\n//\r\n//   rem-calc((16px, 32px, 48), 8px);\r\n\r\n@function rem-calc($values, $base-value: $rem-base) {\r\n\t$max: length($values);\r\n\r\n\t@if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }\r\n\r\n\t$remValues: ();\r\n\t@for $i from 1 through $max {\r\n\t\t$remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));\r\n\t}\r\n\t@return $remValues;\r\n}\r\n\r\n@function em-calc($values, $base-value: $rem-base) {\r\n\t$remValues: rem-calc($values, $base-value: $rem-base);\r\n\r\n\t$max: length($remValues);\r\n\r\n\t@if $max == 1 { @return strip-unit(nth($remValues, 1)) * 1em; }\r\n\r\n\t$emValues: ();\r\n\t@for $i from 1 through $max {\r\n\t\t$emValues: append($emValues, strip-unit(nth($remValues, $i)) * 1em);\r\n\t}\r\n\t@return $emValues;\r\n}\r\n\r\n/// colors black & white\r\n/// @example scss - Usage\r\n///   .my-class {\r\n///     background: black(0.15);\r\n///     color: white(0.9);\r\n///   }\r\n@function black($opacity){\r\n\t@return rgba(black, $opacity);\r\n}\r\n\r\n@function white($opacity){\r\n\t@return rgba(white, $opacity);\r\n}\r\n\r\n// ------------------------------------------------------------\r\n// ---------------------- new mixins---------------------------\r\n// ------------------------------------------------------------\r\n\r\n\r\n//------------------------- mixin calculate font-size to Rem\r\n@function calculateRem($size) {\r\n\t$remSize: $size / 16px;\r\n\t@return $remSize * 1rem;\r\n}\r\n\r\n@mixin fs($size) {\r\n\t@if ($size > 20) {\r\n\t\tfont-size: calculateRem($size);\r\n\t}\r\n\t@else if ($size <= 16){\r\n\t\tfont-size: $size;\r\n\t}\r\n\t@else if ($size <= 17){\r\n\t\tfont-size: $size;\r\n\t\t@include media(\"<=tablet\") {\r\n\t\t\tfont-size: ($size - 1px);\r\n\t\t}\r\n\t}\r\n\t@else if ($size <= 20) {\r\n\t\tfont-size: $size;\r\n\t\t@include media(\"<=tablet\") {\r\n\t\t\tfont-size: ($size - 2px);\r\n\t\t}\r\n\t\t@include media(\"<=xs-phone\") {\r\n\t\t\tfont-size: ($size - 3px);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n//how to use\r\n// p { @include fs(36px);}\r\n\r\n//------------------------- mixin calculate line-height to Rem\r\n@function calculateRemLh($sizeLh) {\r\n\t$remSizeLh: $sizeLh / 16px;\r\n\t@return $remSizeLh * 1rem;\r\n}\r\n\r\n@mixin lh($sizeLh) {\r\n\t@if ($sizeLh > 24) {\r\n\t\tline-height: calculateRemLh($sizeLh);\r\n\t}\r\n\t@else if ($sizeLh <= 18){\r\n\t\tline-height: $sizeLh;\r\n\t}\r\n\t@else if ($sizeLh <= 24){\r\n\t\tline-height: $sizeLh;\r\n\t\t@include media(\"<=tablet\") {\r\n\t\t\tline-height: ($sizeLh - 4px);\r\n\t\t}\r\n\t\t@include media(\"<=xs-phone\") {\r\n\t\t\tline-height: ($sizeLh - 6px);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n//how to use\r\n// p { @include lh(36px);}\r\n\r\n\r\n//-------------------------placeholder mixin\r\n@mixin optional-at-root($sel) {\r\n\t@at-root #{if(not &, $sel, selector-append(&, $sel))} {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@mixin placeholder {\r\n\t@include optional-at-root('::-webkit-input-placeholder') {\r\n\t\t@content;\r\n\t}\r\n\r\n\t@include optional-at-root(':-moz-placeholder') {\r\n\t\t@content;\r\n\t}\r\n\r\n\t@include optional-at-root('::-moz-placeholder') {\r\n\t\t@content;\r\n\t}\r\n\r\n\t@include optional-at-root(':-ms-input-placeholder') {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n//how to use\r\n// .foo {\r\n// \t@include placeholder {\r\n// \t\tcolor: green;\r\n// \t}\r\n// }\r\n\r\n//------------------------- mixin responsive-ratio with round off\r\n@mixin aspect-ratio($x, $y, $withinSelector: div) {\r\n\t$var-aspect-ratio: ($y / $x);\r\n\t$var-aspect-ratio-round: round($var-aspect-ratio * 10000) / 10000;\r\n\tposition: relative;\r\n\toverflow: hidden;\r\n\t&:before {\r\n\t\tcontent: \"\";\r\n\t\tdisplay: block;\r\n\t\twidth: 100%;\r\n\t\tpadding-top: $var-aspect-ratio-round * 100%;\r\n\t}\r\n\t& > #{$withinSelector} {\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\theight: 100%;\r\n\t\twidth: 100%;\r\n\t}\r\n}\r\n//how to use\r\n//div {@include aspect-ratio(16,9,\".class-within\");}\r\n\r\n\r\n//------------------------- Mixin for vertical indentation\r\n@mixin liY($value:15px) {\r\n\t&:nth-child(n+2) {\r\n\t\tmargin-top: $value;\r\n\t}\r\n}\r\n\r\n//how to use\r\n// ul>li {@include liY(20px)}\r\n\r\n//------------------------- Mixin for horizontal indentation\r\n@mixin liX($value:15px) {\r\n\t&:nth-child(n+2) {\r\n\t\tmargin-left: $value;\r\n\t}\r\n}\r\n\r\n//how to use\r\n// ul>li {@include liX(20px}\r\n\r\n// ----------------------------------------------\r\n// ----------------new function -----------------\r\n// ----------------------------------------------\r\n\r\n//------------------------- function calculate px --to-- %\r\n@function p($width-block, $width-container: $width-block) {\r\n\t@if (unitless($width-block)) {\r\n\t\t$width-block: $width-block * 1px;\r\n\t}\r\n\t@if (unitless($width-container)) {\r\n\t\t$width-container: $width-container * 1px;\r\n\t}\r\n\t@return round($width-block / $width-container*100%* 100) / 100;\r\n}\r\n//how to use\r\n// .block {width: p(1000px, 200px);}\r\n\r\n//------------------------- function calculate px --to-- em\r\n$browser-context: 16;\r\n\r\n@function em($pixels, $context: $browser-context) {\r\n\t@if (unitless($pixels)) {\r\n\t\t$pixels: $pixels * 1px;\r\n\t}\r\n\t@if (unitless($context)) {\r\n\t\t$context: $context * 1px;\r\n\t}\r\n\t$em-pixels: $pixels / $context * 1em;\r\n\t@return round($em-pixels * 1000) / 1000;\r\n}\r\n\r\n//how to use\r\n//div {\r\n// font-size: em(20px, 18px);\r\n// }\r\n\r\n//------------------------- function calculate px --to-- rem\r\n$browser-context-for-rem: 16px;\r\n\r\n@function rem($size, $context-for-rem: $browser-context-for-rem) {\r\n\t@if (unitless($size)) {\r\n\t\t$size: $size * 1px;\r\n\t}\r\n\t@if (unitless($context-for-rem)) {\r\n\t\t$context-for-rem: $context-for-rem * 1px;\r\n\t}\r\n\t$remSize: $size / $context-for-rem;\r\n\t//rounding to the thousandth - if you need to add or subtract 0 or less when dividing\r\n\t$roundremSize: round($remSize * 1000) / 1000;\r\n\t@return $roundremSize * 1rem;\r\n}\r\n\r\n//how to use\r\n//div {\r\n// font-size: rem(20px, 16px);\r\n// }\r\n/// Slightly lighten a color\r\n/// @access public\r\n/// @param {Color} $color - color to tint\r\n/// @param {Number} $percentage - percentage of `$color` in returned color\r\n/// @return {Color}\r\n@function tint($color, $percentage) {\r\n\t@return mix(white, $color, $percentage);\r\n}\r\n//how to use\r\n//div {\r\n// background-color: tint(#FF0000, 50%);\r\n// }\r\n\r\n/// Slightly darken a color\r\n/// @access public\r\n/// @param {Color} $color - color to shade\r\n/// @param {Number} $percentage - percentage of `$color` in returned color\r\n/// @return {Color}\r\n@function shade($color, $percentage) {\r\n\t@return mix(black, $color, $percentage);\r\n}\r\n//how to use\r\n//div {\r\n//  background-color: shade(#FF0000, 50%);\r\n// }","// list reset\r\n%listreset {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tlist-style: none;\r\n}\r\n\r\n// clearfix\r\n%clearfix {\r\n\t&:after {\r\n\t\tcontent: '';\r\n\t\tdisplay: block;\r\n\t\tclear: both;\r\n\t}\r\n}\r\n\r\n.clearfix {\r\n\t@extend %clearfix;\r\n}\r\n\r\n\r\n// transition\r\n%transition {\r\n\ttransition: all 0.3s ease-in-out;\r\n}\r\n\r\n// justify nav\r\n%justify {\r\n\ttext-align: justify;\r\n\tfont-size: 1px;\r\n\tline-height: 0px;\r\n\t> * {\r\n\t\tdisplay: inline-block;\r\n\t\tvertical-align: top;\r\n\t\ttext-align: left;\r\n\t\tfont-size: $font-size-base;\r\n\t\tline-height: $line-height-base;\r\n\t}\r\n\t&:after {\r\n\t\tcontent: '';\r\n\t\twidth: 100%;\r\n\t\tdisplay: inline-block;\r\n\t\tvertical-align: top;\r\n\t}\r\n}\r\n\r\n\r\n\r\n/// * Helper class to truncate and add ellipsis to a string too long for it to fit\r\n/// * on a single line.\r\n/// * 1. Prevent content from wrapping, forcing it on a single line.\r\n/// * 2. Add ellipsis at the end of the line.\r\n\r\n.ellipsis {\r\n\twhite-space: nowrap; /* 1 */\r\n\ttext-overflow: ellipsis; /* 2 */\r\n\toverflow: hidden;\r\n}\r\n\r\n//footer to bottom\r\nhtml{\r\n\theight:100%;\r\n}\r\nbody {\r\n\twidth: 100%;\r\n\theight:100%;\r\n\tdisplay: table;\r\n\ttable-layout: fixed;\r\n}\r\n#wrapper {\r\n\tdisplay:table-cell;\r\n}\r\n#footer {\r\n\toverflow:hidden; /*for FF on Windows 7*/\r\n\tdisplay:table-footer-group;\r\n\theight:1%;\r\n}","// https://9elements.com/blog/pure-css-diagonal-layouts/\n:root {\n\t--width-dl: 100vw;\n\t--full-width-dl: 100vw;\n\n\t@media (min-width: 42em) {\n\t\t--width-dl: 42rem;\n\t}\n\n\t--angle-dl: -11deg;\n\t/*-----------------\n  Magic Number Alert:\n\n  the 0.09719 is calculated by this formula:\n  tan(11°) / 2\n  11° is the current skewY value.\n  ------------------*/\n\t--magic-number-dl: 0.09719;\n\t--skew-padding-dl: calc(var(--width-dl) * var(--magic-number-dl));\n\t--clip-padding-dl: calc(var(--full-width-dl) * var(--magic-number-dl));\n}\n\n.diagonal-box {\n\tposition: relative;\n\tpadding: var(--skew-padding-dl) 0;\n\t// margin-top: -1px;\n\tmargin: calc(var(--skew-padding-dl)*2) 0;\n\n\t&:before {\n\t\tcontent: \"\";\n\t\tposition: absolute;\n\t\tleft: 0;\n\t\ttop: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\ttransform: skewy(var(--angle-dl));\n\t\ttransform-origin: 50% 0;\n\t\toutline: 1px solid transparent;\n\t\tbackface-visibility: hidden;\n\t\tbackground-image: linear-gradient(45deg, #654ea3, #eaafc8);\n\t}\n}\n.content {\n  max-width: var(--width-dl);\n  margin: 0 auto;\n  padding: 1.5em;\n  position: relative;\n\n  /* -----------\n  enable the border to see, that the content\n  perfectly fits into the section withou\n  bleeding into the adjecting areas:\n  ------------ */\n  border: 2px dashed #fff8;\n}",".snow {\n\tleft: 0;\n\ttop: 0;\n\theight: 100%;\n\tposition: absolute;\n\twidth: 100%\n}\n\n.canvas-snow-container {\n\tposition: relative;\n\theight: 500px;\n\tbackground: tomato;\n}"],"names":[],"mappings":";AIgBA,AAPC,SAOQ,AAPP,MAAM,CAAC;EACP,OAAO,EAAE,EAAE;EACX,OAAO,EAAE,KAAK;EACd,KAAK,EAAE,IAAI;CACX;;AAwCF,AAAA,SAAS,CAAC;EACT,WAAW,EAAE,MAAM;EAAE,OAAO;EAC5B,aAAa,EAAE,QAAQ;EAAE,OAAO;EAChC,QAAQ,EAAE,MAAM;CAChB;;AAGD,AAAA,IAAI,CAAA;EACH,MAAM,EAAC,IAAI;CACX;;AACD,AAAA,IAAI,CAAC;EACJ,KAAK,EAAE,IAAI;EACX,MAAM,EAAC,IAAI;EACX,OAAO,EAAE,KAAK;EACd,YAAY,EAAE,KAAK;CACnB;;AACD,AAAA,QAAQ,CAAC;EACR,OAAO,EAAC,UAAU;CAClB;;AACD,AAAA,OAAO,CAAC;EACP,QAAQ,EAAC,MAAM;EAAE,uBAAuB;EACxC,OAAO,EAAC,kBAAkB;EAC1B,MAAM,EAAC,EAAE;CACT;;AC3ED,AAAA,KAAK,CAAC;EACL,UAAU,CAAA,MAAC;EACX,eAAe,CAAA,MAAC;EAMhB,UAAU,CAAA,OAAC;EACX;;;;;;sBAMqB;EACrB,iBAAiB,CAAA,QAAC;EAClB,iBAAiB,CAAA,+CAAC;EAClB,iBAAiB,CAAA,oDAAC;CAClB;;AAfA,MAAM,EAAE,SAAS,EAAE,IAAI;EAJxB,AAAA,KAAK,CAAC;IAKJ,UAAU,CAAA,MAAC;GAcZ;;;AAED,AAAA,aAAa,CAAC;EACb,QAAQ,EAAE,QAAQ;EAClB,OAAO,EAAE,sBAAsB,CAAC,CAAC;EAEjC,MAAM,EAAE,8BAA8B,CAAC,CAAC;CAexC;;AAnBD,AAMC,aANY,AAMX,OAAO,CAAC;EACR,OAAO,EAAE,EAAE;EACX,QAAQ,EAAE,QAAQ;EAClB,IAAI,EAAE,CAAC;EACP,GAAG,EAAE,CAAC;EACN,KAAK,EAAE,CAAC;EACR,MAAM,EAAE,CAAC;EACT,SAAS,EAAE,sBAAsB;EACjC,gBAAgB,EAAE,KAAK;EACvB,OAAO,EAAE,qBAAqB;EAC9B,mBAAmB,EAAE,MAAM;EAC3B,gBAAgB,EAAE,wCAAwC;CAC1D;;AAEF,AAAA,QAAQ,CAAC;EACP,SAAS,EAAE,eAAe;EAC1B,MAAM,EAAE,MAAM;EACd,OAAO,EAAE,KAAK;EACd,QAAQ,EAAE,QAAQ;EAElB;;;;iBAIe;EACf,MAAM,EAAE,gBAAgB;CACzB;;ACtDD,AAAA,KAAK,CAAC;EACL,IAAI,EAAE,CAAC;EACP,GAAG,EAAE,CAAC;EACN,MAAM,EAAE,IAAI;EACZ,QAAQ,EAAE,QAAQ;EAClB,KAAK,EAAE,IACR;CAAC;;AAED,AAAA,sBAAsB,CAAC;EACtB,QAAQ,EAAE,QAAQ;EAClB,MAAM,EAAE,KAAK;EACb,UAAU,EAAE,MAAM;CAClB"}